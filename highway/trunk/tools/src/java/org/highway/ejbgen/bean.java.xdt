/*
 * File generated by ejbgen. Do not modify manually.
 */
 
package <XDtPackage:packageName/>.ejb;

import org.highway.exception.TechnicalException;
import org.highway.service.ejb.EjbRequest;
import org.highway.service.ejb.EjbBean;
import org.highway.helper.ValueHelper;

/**
 * File generated by ejbgen. Do not modify manually.
 */
public class <XDtClass:className/>EjbBean extends EjbBean
{
	protected Class getServiceClass()
	{
		return <XDtClass:fullClassName/>.class;
	}

<XDtMethod:forAllMethods>
	public <XDtMethod:methodType/> <XDtMethod:methodName/>(<XDtParameter:parameterList/>)
		<XDtMethod:exceptionList/>
	{
		try
		{
			EjbRequest request = init("<XDtMethod:methodName/>");
<XDtParameter:forAllMethodParams>
			request.addParameter("<XDtParameter:methodParamName/>", <XDtParameter:methodParamType/>.class, ValueHelper.wrap(<XDtParameter:methodParamName/>));
</XDtParameter:forAllMethodParams>
<XDtMethod:ifReturnsVoid>
			request.invoke();
</XDtMethod:ifReturnsVoid>
<XDtEjbGenMethod:ifReturnsObject>
			return (<XDtMethod:methodType/>) request.invoke();
</XDtEjbGenMethod:ifReturnsObject>
<XDtEjbGenMethod:ifReturnsPrimitive>
<XDtMethod:ifIsOfType type="int">
			return ((Integer) request.invoke()).intValue();
</XDtMethod:ifIsOfType>
<XDtMethod:ifIsOfType type="byte">
			return ((Byte) request.invoke()).byteValue();
</XDtMethod:ifIsOfType>
<XDtMethod:ifIsOfType type="short">
			return ((Short) request.invoke()).shortValue();
</XDtMethod:ifIsOfType>
<XDtMethod:ifIsOfType type="long">
			return ((Long) request.invoke()).longValue();
</XDtMethod:ifIsOfType>
<XDtMethod:ifIsOfType type="boolean">
			return ((Boolean) request.invoke()).booleanValue();
</XDtMethod:ifIsOfType>
<XDtMethod:ifIsOfType type="char">
			return ((Character) request.invoke()).charValue();
</XDtMethod:ifIsOfType>
<XDtMethod:ifIsOfType type="double">
			return ((Double) request.invoke()).doubleValue();
</XDtMethod:ifIsOfType>
<XDtMethod:ifIsOfType type="float">
			return ((Float) request.invoke()).floatValue();
</XDtMethod:ifIsOfType>
</XDtEjbGenMethod:ifReturnsPrimitive>
		}
<XDtEjbGenMethod:forAllExceptions>
		catch (<XDtEjbGenMethod:currentException/> e)
		{
			throw e;
		}
</XDtEjbGenMethod:forAllExceptions>
		catch (TechnicalException e)
		{
			throw e;
		}
		catch (Error e)
		{
			throw e;
		}
		catch (Throwable e)
		{
			throw new TechnicalException("Service <XDtMethod:methodName/> unexpectedly failed", e);
		}
		finally
		{
			reset();
		}
	}
</XDtMethod:forAllMethods>
}
