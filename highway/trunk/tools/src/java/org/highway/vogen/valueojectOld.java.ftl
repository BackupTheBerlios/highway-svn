/*
 * File generated by vogen. Do not modify manually.
 */

package ${declaration.packageName};

public class ${declaration.generatedShortClassName}
	extends ${declaration.superClassName}
	implements ${declaration.declaration.qualifiedName}

<#if declaration.hasSerialVersionUID>
	private static final long serialVersionUID = ${declaration.serialVersionUID};
</#if>


<#list declaration.methods as method>
	<#assign propertyName = "${declaration.getPropertyName(method)}">
	
	/**
	 * Property ${propertyName}
	 */ 
	 
	private ${method.returnType} ${method.simpleName};
	
	public static final String ${declaration.constantName(propertyName)} = ${propertyName};

	public ${method.returnType} ${method.simpleName}()
	{
		return ${propertyName};
	}
	public void ${declaration.setMethodName(propertyName)}(${method.returnType} newValue) 
	{
		${declaration.setMethodName(propertyName)}_0(newValue);
	}
	
	protected final void ${declaration.setMethodName(propertyName)}_0(${method.returnType} newValue)
	{
		${method.returnType} oldValue = ${propertyName};
		if (!ValueHelper.equals(oldValue, newValue))
		{
			${propertyName} = newValue;
			firePropertyChange(${declaration.constantName(propertyName)}, oldValue, newValue);
		}
	}
</#list>
	protected boolean equals2(ValueObjectAbstract obj)
	{
		${declaration.generatedShortClassName} vo = ${declaration.generatedShortClassName} obj;
		
		return super.equals2(vo)
			<#list declaration.methods as method><#assign propertyName = "${declaration.getPropertyName(method)}">&& ValueHelper.equals(${propertyName}, vo.${propertyName})
			</#list>;
	}
	
	public int hashCode()
	{
		return super.hashCode()
			<#list declaration.methods as method>+ ValueHelper.hashCode(${declaration.getPropertyName(method)})
			</#list>;
	}
