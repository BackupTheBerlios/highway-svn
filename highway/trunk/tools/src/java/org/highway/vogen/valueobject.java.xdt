/*
 * File generated by vogen. Do not modify manually.
 */

package <XDtPackage:packageName/>;

import org.highway.helper.ValueHelper;
import org.highway.vo.ValueObjectAbstract;

/**
 * File generated by vogen. Do not modify manually.
 */ 
public<XDtVoGen:getAbstract/> class <XDtVoGen:generatedShortClassName/>
	extends <XDtVoGen:superClassName/>
	implements <XDtClass:className/>
{
<XDtClass:ifHasClassTag tagName="highway.vo.serialVersionUID" superclasses="false">
	private static final long serialVersionUID = <XDtClass:classTagValue tagName="highway.vo.serialVersionUID"/>;
</XDtClass:ifHasClassTag>
	
<XDtVoGen:forAllProperties>

	/**
	 * Property <XDtVoGen:propertyName/>
	 */
	private <XDtVoGen:propertyTypeAndDimension/> <XDtVoGen:propertyName/>;
	
	public static final String <XDtVoGen:constantName/> = "<XDtVoGen:propertyName/>";
	
	public <XDtVoGen:propertyTypeAndDimension/> <XDtVoGen:getMethodName/>()
	{
		return <XDtVoGen:propertyName/>;
	}
	
	public void <XDtVoGen:setMethodName/>(<XDtVoGen:propertyTypeAndDimension/> newValue) 
	{
		<XDtVoGen:setMethodName/>_0(newValue);
	}
	
	protected final void <XDtVoGen:setMethodName/>_0(<XDtVoGen:propertyTypeAndDimension/> newValue)
	{
		<XDtVoGen:propertyTypeAndDimension/> oldValue = <XDtVoGen:propertyName/>;
		if (!ValueHelper.equals(oldValue, newValue))
		{
			<XDtVoGen:propertyName/> = newValue;
			firePropertyChange(<XDtVoGen:constantName/>, oldValue, newValue);
		}
	}
	
</XDtVoGen:forAllProperties>

	protected boolean equals2(ValueObjectAbstract obj)
	{
		<XDtVoGen:generatedShortClassName/> vo = (<XDtVoGen:generatedShortClassName/>) obj;
		
		return super.equals2(vo)<XDtVoGen:forAllProperties>
			&& ValueHelper.equals(<XDtVoGen:propertyName/>, vo.<XDtVoGen:propertyName/>)</XDtVoGen:forAllProperties>;
	}
	
	public int hashCode()
	{
		return super.hashCode()<XDtVoGen:forAllProperties>
			+ ValueHelper.hashCode(<XDtVoGen:propertyName/>)</XDtVoGen:forAllProperties>;
	}
}
